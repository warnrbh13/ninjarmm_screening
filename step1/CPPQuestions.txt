1. Explain the different types of containers available in the standard library, what are their differences? Explain use cases for each.
/*
	There are 3 classes of containers since C++11 
		* Sequence containers
			Implement data structures which can be accessed sequentially.
			- e.g. a vector and an array store the data contiguously and can be accessed sequentially
			- e.g. deque, forward_list and list event when then can be accessed sequentially their elements
			  are not allocated contiguously, as it is obvious for forward_list that its a single linked list
			  or the list that is an implementation of a double linked list. deque's elements are not considered
			  to be allocated contiguously due to it's implementation
			
		* Associative containers
			Implement sorted data structures that can be quickly searched (O(log N) time complexiy) 
			- e.g. set is a collection of unique keys, sorted by keys
			- e.g. map is a collection of key-value pairs, sorted by keys, keys are unique

		* Unordered associative containers (since C++11)
			Unordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1)
			amortized, O(N) worst-case complexity)
			- e.g. unordered_set is a collection of unique keys, hashed by keys
			- e.g. unordered_map is a collection of key-value pairs, hashed by keys, keys are unique

		To explain the use cases for each depends on the application. Vectors for instance, should be the preferred container for
		managiing a sequence when random access to any element is at a premium and insertions or deletions of elements are only required
		at the end of sequence. In another hand the performance of the list container is superior when efficient insertions and deletions
		(in constant time) at any location within the sequence is at a premium. Such operations in the middle of a sequence require element
		copies and assignments proportional to the number of elements in the sequence (O(N)).

		Associative and unordered associative containers are very similar but the difference is how data is being pushed into the data structure
		in Associative containers this data is being sorted while being pushed, in case of set elemets are sorted by unique keys and maps elements
		sorted by keys which are unique aswell however each element is a key-value pair
*/

2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
/*
	
	* Insertion Sort
		This it's very similar than two well known sorting algorithms: Bubble Sort and Selection Sort.
		Insertion Sort steps:
		1. Remove value at index 1 (second item on the array) and store it ina temporary variable. This will leave a gap
		   at that index, insubsequent pass-throughs, values are removed at the subsequent indexes
		2. Then each value to the left of the gap is compared with the value temporary stored, if it is bigger then it fills
		   the gap and the temporary value is stored in this "left value" memory space.
		3. Continue till the end and start each loop in the subsequent index from the previous iteration

		Time complexity is O(n^2)

	* MergeSort
		It is a divide and conquer algorithm, the main idea is to break the problem in smaller subproblems
		recursively, and finally combine the solutions to the subproblems into one for the original problem.
		It breaks the input array in half, each halves are each sorted recursively, alfter these two halves
		are sorted, they are combined into the final solution. The base case to return form the recursive calls
		is when the input array is 0 or 1 elements long and it is returned directly, then the "merge" algorithm
		makes completes the sorting in that stack recursive context.

		It's time complexity is O(nlogn) in average.

	* Quick Sort
		This algorithm consists in the following steps:
		1. Choose a pivot element
		2. Rearrange the input array around the pivot
			Given the pivot element p, the next task is to arrange the elements of the array so that everything
			before p in the array is less than p, and everything after p is greater than p. After this step, 
			the pivot element ends indeed, in it's correct final position.
		3. Repeat steps 1 and 2 for the subarray before the pivot and the subarray after the pivot

	* Differences and use cases
		-	MergeSort and Quick sort
			This two sorting algorithms must be considered when you have a huge data collection to sort.

			MergeSort and Quick Sort are similar in average case since both are O(nlogn). An important difference is that
			to sort the data Quick Sort uses less memory since it's an inplace algorithm (such as insertion sort), 
			MergeSort uses additional memory to merge halves into final answer.

			Quick Sort disadvantage is that it's worst case is O(n^2). This worst case scenario depends on how the pivot
			is chosen, considering early versions of chosen it (leftmost or rightmost) the worst cases are:
				1 Array is already sorted in the same order
				2 Arrays is already sorted in reverse order
				3 All alements are the same

			This pivot selection problem was solved by choosing either a random index for the pivot, the middle index, the 
			meddian of the first, middle and last element of the partititon for the pivot. Whit these modifications the worst
			case of Quicksort has fewer chances to occur, but a worst case can still ocurr if the input array is such that
			the maximum or the minimum element is always chosen as the pivot

			So which is better? A very short but not simple answer would be to say that "It Depends"
			If you have a big collection of data it's very important to consider this both and the decision between both will 
			depend on your system and your data collection

			* MergeSort ensures you a time complexity of O(nlogn) in the best, average and worst scenarios but uses considerably 
			  more memory so if you are working on a system with limited resources you would probably need to think twice before choosing
			  this algorithm

			* QuickSort this algorithm is a very elegant algorithm since it is very fast and uses practially no additional memory,
			  perfect for systems with limited resources, however if it's very likely to fall into the worst cases scenarios
			  it would be extremely slow for this big-collection-of-data applications since it worst case it's O(n^2)


		-	Insertion Sort
			This seems to be the worst of the three but it's important to know it because for short amounts of data it can be
			faster than MergeSort and QuickSort, in addition it uses almost none extra memory so it's ideal for limited resources 
			systems that are handle few data
	
*/

3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly. 
	In c++ interfaces are always pure virtual classes. Usually, you add virtual destructors to interfaces. In some rare circumstances,
	it's possible to leak resources if you fail to mark destructors as virtual. Here is an example:

	struct BaseClass{};

	struct DerivedClass : BaseClass {
		DerivedClass() {
			cout << "DerivedClass() invoked" << endl;
		}
		~DerivedClass() {
			cout << "~DerivedClass() invoked" << endl;
		}
	}

	int main() {
		cout << "Constructing DerivedClass x" << endl;
		BaseClass x{new DerivedClass{}};

		cout << "Deleting x as BaseClass x" << endl;
		delete x;

		return {};
	}

	The output in this case would be:
	------------------------------
	Constructing DerivedClass x
	DerivedClass() invoked
	Deleting x as BaseClass x
	------------------------------

	Here you see a DerivedClass deriving from BaseClass, this class has a constructor and destructor
	that print when they are invoked. There is no problem using new operator to invoke and initalize 
	DerivedClass. But when you delete the pointer, the BaseClass destructor gets invoked, but the 
	DerivedClass destructor does not, this produces a memory leak. The proper way to write this piece
	of code would be:

	struct BaseClass{
		virtual ~BaseClass() = default;
	};

	struct DerivedClass : BaseClass {
		DerivedClass() {
			cout << "DerivedClass() invoked" << endl;
		}
		~DerivedClass() {
			cout << "~DerivedClass() invoked" << endl;
		}
	}


	int main() {
		cout << "Constructing DerivedClass x" << endl;
		BaseClass x{new DerivedClass{}};

		cout << "Deleting x as BaseClass x" << endl;
		delete x;

		return {};
	}

	Now the output would be:
	------------------------------
	Constructing DerivedClass x
	DerivedClass() invoked
	Deleting x as BaseClass x
	~DerivedClass() invoked
	------------------------------

	Adding the virtual destructor causes the DerivedClass destructor to get invoked when you 
	delete the BaseClass pointer which results in the DerivedClass destructor printing the message.

4. Explain the keyword: static. What does it mean in each context?

	General Definition:

		Static is a modifier that has two principal effects in functions and variables:
		* It affects the scope of the variable or function, it means
		  this function will not be visible outside the block where it's
		  declared
		* It affects the lifetime of the variable. This means the variable will exists
		  from the begining to the end of the program

	Static and Classes
		* In the context of a class, if a class contains a data member declarared as static, only one 
		  copy of the data is maintained for all objects of the class.
		  Static data members can be referred without reffering to an object of class type.
 	   * Static data members are not part of objects of a given class type. As result, the declaration
		  of a static data member is not considered a definition. In this particular case the static members
		  are declared in class scope but definition is performed at file scope. These static members
		  have external linkage.

5. When are static member variables initialized? 
	Static member variables are initialized to their default zero or null if they are pointers before the
	begining of the program.

	Static members of a class are not associated with a particular instance of the class. Static members
	have static storage duration, these are similar to static variables and functions declared at global
	scope (static storage duration and are allocate when the program starts and deallocated when the program stops)
	but these need to be refered using the scope resolution operator (::). They must be initialized 
	at global scope, not within a containing class definition.

6. What is the difference between R-Values and L-Values?
	L-Values are object reference and the R-Value is the actual value of that reference 
	An lvalue is an expression that yields an object reference, such as a variable name, 
	an array subscript reference, a dereferenced pointer, or a function call that returns 
	a reference. An lvalue always has a defined region of storage, so you can take its address.

	An rvalue is an expression that is not an lvalue. Examples of rvalues include literals, 
	the results of most operators, and function calls that return nonreferences. An rvalue does 
	not necessarily have any storage associated with it.

	An rvalue is a temporary value that does not persist beyond the expression where is used.

7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";
		return something;
	}

	It is returning an rvalue, and its storage duratoin is until it returns
	from the function. It will initialize temporarly an string object with the 
	rvalue of "avalue", then this value will be copied to the return value object
	and the temporary will be destroyed.
	
	Bonus: What would most compilers do with this code?

8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
	To allocate dynamic memory using malloc you must calculate the memory required manually, new does it automatically
	At memory allocation using new operator if it fails it throws and exception
	You can overload new operator for your own types 

	Delete frees the memory and calls the destructor of the object and free only frees the memory

9. Explain the purpose of std::move, and std::forward. 
	std::move -> it exists to avoid copying that can quite time-consuming at runtime when a larga amount of data is involved. With move you
	can transfer ownershop of the resources from on object to another but this is not a renaming, when move is performed between two objects
	these objects are separate objects with separate storage and potentially separate lifetimes

	std::forward -> Is used to cast templated function parameter
	

10. How do you share resources safely between threads? How would you share an integer value vs user defined type? 
	Safe resource sharing can be achieved with syncronization, in c++ we have mutexes and lock_guards. Mutexes allow to block resources to be used
	by other threads or main code until this it's unlocked, there are other usefull alternatives like lock_guards which are safer since they
	unlock the resouces automatically after the data gets out of scope. 

	I would share them the same way.

11. What are the some of the principles of object-oriented programming?
		Polymorphism -> This allows to change the type of a class or cast it as another type
		Encapsulation -> This allows to prevent the acces of some member variables or funcitons from a class, structure
						 or translation unit to be modified or accessed directly
		Abstraction ->  To show only for the user of the class, structure or translation unit the functions he need to use or 
						configure an instance of this data without providing any detail an complexity of the construction information
		Inheritance -> This allows your class to inherit or members, variables, functions

12. Explain inheritance vs composition vs aggregation?
	Composition -> 	To qualify as a composition, an object and a part must have the following relationship:
					The part (member) is part of the object (class)
					The part (member) can only belong to one object (class) at a time
					The part (member) has its existence managed by the object (class)
					The part (member) does not know about the existence of the object (class)

	Inheritance ->  Inheritance in C++ takes place between classes. In an inheritance (is-a) relationship, 
					the class being inherited from is called the parent class, base class, or superclass, and 
					the class doing the inheriting is called the child class, derived class, or subclass.

	Aggretation ->  To qualify as an aggregation, a whole object and its parts must have the following relationship:
					The part (member) is part of the object (class)
					The part (member) can (if desired) belong to more than one object (class) at a time
					The part (member) does not have its existence managed by the object (class)
					The part (member) does not know about the existence of the object (class)

13. Should you always initialize variables? 
	Its best practicee to initialize variables, otherwise you could have some unexpected 
	behavior in rare cases, but there are variables that are non-nullables.
	Classes are nullables.

14. What concept(s) in C++ would you use to manage resources automatically?
	a. How important are these concepts?
	b. What tools are you familiar with for tracking resource allocations? 
	This is known as RAII -> Resource Acquisition Is Initialization

    C++ doesn't have a garbage collector, wich is a proccess running in operating systems or languages like Java (as it runs over a virtual machine)
	that releases heap memory and some other resources when it's considered that won't be needed

	In C++ if you don't do this manually it can cause memory leaks which is dangerous for any c++ application
	You can make use of storage duration of objects to get them destroyed automatically, there are some other resources 
	in std lib like smart pointers that can handle dynamic memory allocation and eliminates the need of an explicit destructor
	in the classes.

	An extra case can be mutexes which were described previously that help to mmanage resources when they are shared and can potentially
	cause a race condition.

15. What security concerns have you come across in the past and how have you addressed them?
	One of them was on an embedded device that needed to connect with a cloud platform.
	The SoC of the device had a TPM so a module was implemented to manage keys and certificates, using this TPM hardware module.

16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.
	The context of my answer is that my entire career I have been and Embedded Software developer
	I would say that having a virtual environment is one of the most usefull things when working. Having your device simulated 
	on a linux environment it's very usefull because it gets you to develop faster since you're able to test you code very quick.
	Aswell having debuggin tools such as a debugger or network tools like wire shark or tcp dump.
	 
17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance.   
18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
	a. Consider both a long term and short-term solutions. 
19. What concerns do you had supporting legacy operating systems? (If any)
20. Tell us about a project you worked on that you found to be interesting or unusual. 
