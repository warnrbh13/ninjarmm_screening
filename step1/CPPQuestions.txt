1. Explain the different types of containers available in the standard library, what are their differences? Explain use cases for each.
/*
	There are 3 classes of containers since C++11 
		* Sequence containers
			Implement data structures which can be accessed sequentially.
			- e.g. a vector and an array store the data contiguously and can be accessed sequentially
			- e.g. deque, forward_list and list event when then can be accessed sequentially their elements
			  are not allocated contiguously, as it is obvious for forward_list that its a single linked list
			  or the list that is an implementation of a double linked list. deque's elements are not considered
			  to be allocated contiguously due to it's implementation
			
		* Associative containers
			Implement sorted data structures that can be quickly searched (O(log N) time complexiy) 
			- e.g. set is a collection of unique keys, sorted by keys
			- e.g. map is a collection of key-value pairs, sorted by keys, keys are unique

		* Unordered associative containers (since C++11)
			Unordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1)
			amortized, O(N) worst-case complexity)
			- e.g. unordered_set is a collection of unique keys, hashed by keys
			- e.g. unordered_map is a collection of key-value pairs, hashed by keys, keys are unique

		To explain the use cases for each depends on the application. Vectors for instance, should be the preferred container for
		managiing a sequence when random access to any element is at a premium and insertions or deletions of elements are only required
		at the end of sequence. In another hand the performance of the list container is superior when efficient insertions and deletions
		(in constant time) at any location within the sequence is at a premium. Such operations in the middle of a sequence require element
		copies and assignments proportional to the number of elements in the sequence (O(N)).

		Associative and unordered associative containers are very similar but the difference is how data is being pushed into the data structure
		in Associative containers this data is being sorted while being pushed, in case of set elemets are sorted by unique keys and maps elements
		sorted by keys which are unique aswell however each element is a key-value pair
*/

2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
/*

	* Merge Sort
	* Quick Sort
	* Seleciton Sort

*/

3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly. 
4. Explain the keyword: static. What does it mean in each context?

	General Definition:
		Static is a modifier that has two principal effects in functions and variables:
		* It affects the scope of the variable or function, it means
		  this function will not be visible outside the block where it's
		  declared
		* It affects the lifetime of the variable. This means the variable will exists
		  from the begining to the end of the program

	Static and Classes
		* In the context of a class, if a class contains a data member declarared as static, only one 
		  copy of the data is maintained for all objects of the class.
		  Static data members can be referred without reffering to an object of class type.
 	   * Static data members are not part of objects of a given class type. As result, the declaration
		  of a static data member is not considered a definition. In this particular case the static members
		  are declared in class scope but definition is performed at file scope. These static members
		  have external linkage.
	


5. When are static member variables initialized? 
6. What is the difference between R-Values and L-Values?
7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";
		return something;
	}
	
	Bonus: What would most compilers do with this code?
8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
9. Explain the purpose of std::move, and std::forward. 
10. How do you share resources safely between threads? How would you share an integer value vs user defined type? 
11. What are the some of the principles of object-oriented programming?
12. Explain inheritance vs composition vs aggregation?
13. Should you always initialize variables? 
14. What concept(s) in C++ would you use to manage resources automatically?
	a. How important are these concepts? 	
	b. What tools are you familiar with for tracking resource allocations? 
15. What security concerns have you come across in the past and how have you addressed them?
16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.
17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance.   
18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
	a. Consider both a long term and short-term solutions. 
19. What concerns do you had supporting legacy operating systems? (If any)
20. Tell us about a project you worked on that you found to be interesting or unusual. 
